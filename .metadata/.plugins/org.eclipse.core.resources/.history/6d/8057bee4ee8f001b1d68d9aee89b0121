import java.time.LocalDate;
import java.time.LocalTime;
import java.util.*;

public class Reseptioniest extends Employee {
	MuseumSystem M;
	Scanner input = new Scanner(System.in);

	Reseptioniest(String Name, String address, int ID, String NOT, LocalDate dob, LocalDate hire, int employee_id) {
		super(Name, address, ID, NOT, dob, hire, employee_id);
	}

	Reseptioniest() {
		M = new MuseumSystem();
		
	}

public	MuseumSystem Database() {
	  
	    Guide G2 = new Guide();
		LocalDate g1 = LocalDate.of(2021, 2, 20);
		G2.setHire_Date(g1);
		G2.setAddress("Balata Albalad");
		LocalDate g2 = LocalDate.of(2000, 2, 20);
		G2.setDateOfbirth(g2);
		G2.setName("Mohammad Salah");
		G2.setNumOftelph("0592365987");
		ArrayList<WorkingDay> Workingdaylist = new ArrayList<WorkingDay>();
		WorkingDay WD1 = WorkingDay.SUNDAY;
		WorkingDay WD2 = WorkingDay.TUSEDAY;
		WorkingDay WD3 = WorkingDay.THURSDAY;
		Workingdaylist.add(WD1);
		Workingdaylist.add(WD2);
		Workingdaylist.add(WD3);
		G2.setWD1(Workingdaylist);
		ArrayList<Languages> Langueges1 = new ArrayList<>();
		Languages L = Languages.ARABIC;
		Languages L1 = Languages.ENGLISH;
		Languages L2 = Languages.FRENCH;
		Langueges1.add(L);
		Langueges1.add(L1);
		Langueges1.add(L2);
		G2.set_Languages(Langueges1);
		G2.setEmployee_id(G2.getEmployee_id());
		G2.setM_tour_perday(3);
		G2.setID(345);
		M.getGuideslist().add(G2);
		int e1 = G2.getEmployee_id();
		e1++;
		G2.setEmployee_id(e1);

		Guide G3 = new Guide();
		LocalDate g3 = LocalDate.of(2020, 3, 20);
		G3.setHire_Date(g3);
		G3.setAddress("coper");
		LocalDate g5 = LocalDate.of(2001, 5, 25);
		G3.setDateOfbirth(g5);
		G3.setName("Omar Barghothi");
		G3.setNumOftelph("059298655");
		ArrayList<WorkingDay> Workingdaylist1 = new ArrayList<WorkingDay>();
		WorkingDay WD4 = WorkingDay.MONDAY;
		WorkingDay WD6 = WorkingDay.WEDNESDAY;
		Workingdaylist1.add(WD4);
		Workingdaylist1.add(WD6);
		G3.setWD1(Workingdaylist1);
		ArrayList<Languages> Langueges2 = new ArrayList<>();
		Languages L3 = Languages.ARABIC;
		Languages L4 = Languages.ENGLISH;
		Languages L5 = Languages.FRENCH;
		Langueges2.add(L3);
		Langueges2.add(L4);
		Langueges2.add(L5);
		G3.set_Languages(Langueges2);
		G3.setEmployee_id(G3.getEmployee_id());
		G3.setM_tour_perday(2);
		G3.setID(111);
		M.getGuideslist().add(G3);
		int e = G3.getEmployee_id();
		e++;
		G3.setEmployee_id(e);

		Visitor V = new Visitor();
		V.setAddress("Ginin");
		LocalDate g0 = LocalDate.of(1999, 6, 3);
		V.setDateOfbirth(g0);
		V.setName("Mustafa jo");
		V.setNum_ofVisit(3);
		V.setNumOftelph("0568976543");
		V.setRecord_id(V.getRecord_id());
		V.setID(123);
		int i = V.getRecord_id();
		i++;
		V.setRecord_id(i);
		ArrayList<VisitorRecord> VisitorRecord1;
		VisitorRecord1 = new ArrayList<VisitorRecord>();
		LocalTime l1 = LocalTime.of(5, 15);
		LocalDate g = LocalDate.of(2020, 5, 24);
		VisitorRecord vr = new VisitorRecord();
		vr.setEnteringdate(g);
		vr.setEnteringtime(l1);
		VisitorRecord1.add(vr);
		V.setVisitorRecord1(VisitorRecord1);
		M.getVlist().add(V);

		Visitor V1 = new Visitor();
		V1.setAddress("Nablus");
		LocalDate gp = LocalDate.of(1998, 03, 03);
		V1.setDateOfbirth(gp);
		V1.setName("Ahmad");
		V1.setNum_ofVisit(6);
		V1.setNumOftelph("0564566543");
		V1.setRecord_id(V.getRecord_id());
		V1.setID(500);
		int i1 = V1.getRecord_id();
		i1++;
		V1.setRecord_id(i);
		ArrayList<VisitorRecord> VisitorRecord2;
		VisitorRecord2 = new ArrayList<VisitorRecord>();
		LocalTime l2 = LocalTime.of(5, 15);
		LocalDate g12 = LocalDate.of(2020, 5, 24);
		VisitorRecord vr1 = new VisitorRecord();
		vr1.setEnteringdate(g12);
		vr1.setEnteringtime(l2);
		VisitorRecord2.add(vr1);
		V1.setVisitorRecord1(VisitorRecord2);
		M.getVlist().add(V1);

		MultiTimeTecket Mt1 = new MultiTimeTecket();
		subscriptions Su = new subscriptions();
		Tickettype tt = Tickettype.WEEKLY;
		double price = 100;
		Mt1.setPrice(price);
		int CountSubs = 5;
		price = price * 0.2 + price;
		Mt1.setPrice(price);
		Mt1.setNotH(V1.getName());
		Date dy;
		dy = new Date();
		Mt1.setIssue_date(dy);
		int Tid;
		Tid = Mt1.getTicket_id();
		Mt1.setTicket_id(Tid);
		Tid++;
		Mt1.setTtype(tt);
		Mt1.setV(V1);
		Su.setCountofsubs(CountSubs);
		Su.setV1(V1);
		Su.setTy(Mt1);
		Su.setTG(G3);
		M.getSubscriptionslist().add(Su);
		return M;
	}




	public MuseumSystem getM() {
	return M;
}

public void setM(MuseumSystem m) {
	M = m;
}

	void registersubs(int idf) {
		MultiTimeTecket Mt = new MultiTimeTecket();
		if (availableSubs(idf)) {

			System.out.println("You already have a subscription");
			System.out.println("Your information subscription is:" + getSubs(idf).toString());
		} else {

			if (Database().availablevisitor(idf)) {
				System.out.println("your information is:" + Database().getvisitor(idf).toString());
				subscriptions s = new subscriptions();
				System.out.println("Enter type of subscription:");
				System.out.println("1.Weekly subscription\n2.Montly subscription\n3.yearly subscription\n");
				int egf = input.nextInt();
				System.out.println("Are you want subs: 1.with guide,2.without guide\n");
				int wg = input.nextInt();
				if (wg == 1) {
					Guide o = new Guide();
					s.setTG(o);

				} else {
					s.setTG(null);

				}
						
				if (egf == 1) {

					Tickettype tt = Tickettype.WEEKLY;
					double price = 100;
					Mt.setPrice(price);
					issuetecketMulti(tt, idf, Mt, wg);
					int CountSubs = 5;
					s.setCountofsubs(CountSubs);
					s.setV1(Database().getvisitor(idf));
					s.setTy(Mt);
					Database().getSubscriptionslist().add(s);
					System.out.println("A successful subscription");

				} else if (egf == 2) {
					Tickettype tt = Tickettype.MONTHLY;
					double eg2 = 300;
					Mt.setPrice(eg2);
					issuetecketMulti(tt, idf, Mt, wg);
					int CountSubs = 22;
					s.setCountofsubs(CountSubs);
					s.setV1(Database().getvisitor(idf));
					s.setTy(Mt);
					Database().getSubscriptionslist().add(s);
					System.out.println("A successful subscription");
				} else if (egf == 3) {

					Tickettype tt = Tickettype.YEARLY;
					double eg2 = 2500;
					Mt.setPrice(eg2);
					issuetecketMulti(tt, idf, Mt, wg);
					int CountSubs = 250;
					s.setCountofsubs(CountSubs);
					s.setV1(Database().getvisitor(idf));
					s.setTy(Mt);
					Database().getSubscriptionslist().add(s);
					System.out.println("A successful subscription");
				

				}

			} else {
				Visitor g = new Visitor();
				Database().ReadVisitor(g);
				Database().addVisitor(g);
				System.out.println("Your information has been registered and now you will go to choose your subscription");
				registersubs(idf);

			}
		}

	}

	void issuetecketMulti(Tickettype tt, int u, MultiTimeTecket mt, int wg) {

		mt.setNotH(Database().getvisitor(u).getName());
		Date dy;
		dy = new Date();
		mt.setIssue_date(dy);
		int Tid;
		Tid = mt.getTicket_id();
		mt.setTicket_id(Tid);
		Tid++;
		mt.setTtype(tt);

		if (wg == 1) {
			double price;
			price = mt.getPrice();
			price = price * 0.2 + price;
			mt.setPrice(price);
			System.out.println("Your subscription price is:" + mt.getPrice() + "$");

		}

		else if (wg == 2) {

			double prise;
			prise = mt.getPrice();
			mt.setPrice(prise);
			System.out.println("Your subscription price is:" + mt.getPrice() + "$");

		}

		mt.setV(Database().getvisitor(u));

	}

	void issuetecketOne(OneTimeTecket ot, int wg, String n) {
		ot.setNotH(n);
		Date dy;
		dy = new Date();
		ot.setIssue_date(dy);
		int Tid;
		Tid = ot.getTicket_id();
		ot.setTicket_id(Tid);
		Tid++;
		ot.setTtype(null);

		if (wg == 1) {
			Database().Withguide(2, 0, ot);
			double price;
			price = ot.getPrice();
			price = price * 0.2 + price;
			ot.setPrice(price);
			System.out.println("Your ticket price is:" + ot.getPrice() + "$");

		}

		else if (wg == 2) {

			double prise;
			prise = ot.getPrice();
			ot.setPrice(prise);
			System.out.println("Your ticket price is:" + ot.getPrice() + "$");

		}

	}

	void deletesubs(int idv7) {
		Database();
		for (subscriptions V1 : Database().getSubscriptionslist()) {

			if (V1.getV1().getID() == idv7) {

				 Database().getSubscriptionslist().remove(V1);
			}
		}

	}

	void editSubs() {
		Database();
		System.out.println(" Enter Visitor id");
		int idv6 = input.nextInt();
		
			for (subscriptions Vs : Database().getSubscriptionslist()) {

				if (Vs.getV1().getID() == idv6) {
					System.out.println(" Your information subs is:");
					System.out.println(Vs.toString());
					System.out.println(" Choose the information field that you want to edit");
					
					int x = 10;
					while (x != 0) {
						System.out.println(
								"1.Name\n2.ID\n3.Date of birth\n4.telephone Number\n5.address\n6.subscriptions Type\n7.Finish edit");
						x = input.nextInt();
						switch (x) {
						case 1:
							System.out.println(" Enter new Name");
							String s;
							s = input.next();
							Vs.getV1().setName(s);
							System.out.println("new name is:" + s + "\n");
							break;
						case 2:
							System.out.println(" Enter new ID");
							int id = input.nextInt();
							Vs.getV1().setID(id);
							System.out.println("new ID is:" + id + "\n");
							break;
						case 3:
							System.out.println("4.Enter guide new Birth Day :Year,Month,Week ");
							int day = input.nextInt();
							int month = input.nextInt();
							int year = input.nextInt();
							LocalDate g = LocalDate.of(year, month, day);
							Vs.getV1().setDateOfbirth(g);
							System.out.println("new Birth Day is" + g.toString());
							break;
						case 4:
							System.out.println(" Enter new telephone Number ");
							String s1;
							s1 = input.next();
							Vs.getV1().setNumOftelph(s1);
							System.out.println("new telephone Number is:" + s1);
							break;
						case 5:
							System.out.println(" Enter new  address ");
							String s2;
							s2 = input.next();
							Vs.getV1().setAddress(s2);
							System.out.println("new  address is:" + s2);

							break;
						case 6:
							System.out.println("Enter new subscriptions Type\n1.Weekly\n2.Monthly\n3.Yearly");
							int idy = input.nextInt();
							if (idy == 1) {

								Vs.getTy().setTtype(Tickettype.WEEKLY);
							} else if (idy == 2) {
								Vs.getTy().setTtype(Tickettype.MONTHLY);

							} else if (idy == 3) {

								Vs.getTy().setTtype(Tickettype.YEARLY);
							}

							break;
						case 7:
							System.out.println(" New Visitor information subscription is:"+Vs.toString());
							break;
						default:
							if(x!=0) {System.out.println("Wrong entry !\nTry again");}
							break;

						}

					}

				}

			}

		}

	

	public boolean availableSubs(int id9) {
		
		for (subscriptions V1 : Database().getSubscriptionslist()) {

			if (V1.getV1().getID() == id9) {
				System.out.println("is subscriped");
				return true;
			}

		}
		System.out.println("He does not have a subscription");
		return false;

	}

	public subscriptions getSubs(int id9) {
		
		for (subscriptions S1 : Database().getSubscriptionslist()) {

			if (S1.getV1().getID() == id9) {

				return S1;
			}

		}
		System.out.println("He does not have a subscription");
		return null;

	}

	@Override
	public String toString() {
		return "How can  we serve you? \n1.Guide registration .\n2.Visitor registration.\n3.subscriptions to the visitors.\n4.Book tour.\n";
	}

}
